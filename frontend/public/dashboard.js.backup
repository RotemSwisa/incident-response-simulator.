const { useState, useEffect } = React;

const Dashboard = () => {
  const [alerts, setAlerts] = useState([]);
  const [selectedAction, setSelectedAction] = useState('');
  const [responseTime, setResponseTime] = useState(0);
  const [scenarioActive, setScenarioActive] = useState(false);

  // Mock alerts - בהמשך נחבר לAPI האמיתי
  const mockAlerts = [
    {
      id: 1,
      timestamp: new Date().toISOString(),
      level: 'INFO',
      message: 'User john_doe logged into workstation DESKTOP-VICTIM01',
      source: 'Authentication System'
    },
    {
      id: 2,
      timestamp: new Date(Date.now() - 30000).toISOString(),
      level: 'WARNING',
      message: 'Suspicious web request to external domain: evil-bank.com',
      source: 'Web Proxy'
    },
    {
      id: 3,
      timestamp: new Date(Date.now() - 60000).toISOString(),
      level: 'CRITICAL',
      message: 'Potential phishing attempt detected from DESKTOP-VICTIM01',
      source: 'Security Monitor'
    }
  ];

  useEffect(() => {
    // התחלת סצנריו
    setAlerts(mockAlerts);
    setScenarioActive(true);
    
    // ספירת זמן תגובה
    const timer = setInterval(() => {
      setResponseTime(prev => prev + 1);
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  const handleResponse = (action) => {
    setSelectedAction(action);
    console.log(`Action taken: ${action} after ${responseTime} seconds`);
    
    // בהמשך נשלח לAPI
    // fetch('/api/scenarios/1/response', { 
    //   method: 'POST', 
    //   body: JSON.stringify({ action, responseTime }) 
    // });
  };

  const getAlertIcon = (level) => {
    switch (level) {
      case 'CRITICAL': return '⚠️';
      case 'WARNING': return '🟨';
      default: return '🔵';
    }
  };

  const getAlertColor = (level) => {
    switch (level) {
      case 'CRITICAL': return 'border-red-500 bg-red-50';
      case 'WARNING': return 'border-yellow-500 bg-yellow-50';
      default: return 'border-blue-500 bg-blue-50';
    }
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return React.createElement('div', { className: 'min-h-screen bg-gray-100 p-6' },
    React.createElement('div', { className: 'max-w-6xl mx-auto' },
      
      // Header
      React.createElement('div', { className: 'bg-white rounded-lg shadow-md p-6 mb-6' },
        React.createElement('div', { className: 'flex items-center justify-between' },
          React.createElement('h1', { className: 'text-2xl font-bold text-gray-800' },
            'Incident Response Training Dashboard'
          ),
          React.createElement('div', { className: 'flex items-center space-x-4' },
            React.createElement('div', { className: 'flex items-center text-gray-600' },
              React.createElement('span', null, `⏱️ Response Time: ${formatTime(responseTime)}`)
            ),
            React.createElement('div', { 
              className: `px-3 py-1 rounded-full text-sm font-medium ${
                scenarioActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
              }` 
            }, scenarioActive ? 'Scenario Active' : 'No Active Scenario')
          )
        )
      ),

      React.createElement('div', { className: 'grid grid-cols-1 lg:grid-cols-3 gap-6' },
        
        // Alerts Feed
        React.createElement('div', { className: 'lg:col-span-2' },
          React.createElement('div', { className: 'bg-white rounded-lg shadow-md p-6' },
            React.createElement('h2', { className: 'text-xl font-semibold text-gray-800 mb-4' },
              'Security Alerts Feed'
            ),
            React.createElement('div', { className: 'space-y-3 max-h-96 overflow-y-auto' },
              alerts.map(alert =>
                React.createElement('div', {
                  key: alert.id,
                  className: `p-4 border-l-4 rounded-r-lg ${getAlertColor(alert.level)}`
                },
                  React.createElement('div', { className: 'flex items-start justify-between' },
                    React.createElement('div', { className: 'flex items-start space-x-3' },
                      React.createElement('span', { className: 'text-lg' }, getAlertIcon(alert.level)),
                      React.createElement('div', null,
                        React.createElement('p', { className: 'text-sm font-medium text-gray-800' },
                          alert.message
                        ),
                        React.createElement('p', { className: 'text-xs text-gray-500 mt-1' },
                          `${alert.source} • ${new Date(alert.timestamp).toLocaleTimeString()}`
                        )
                      )
                    ),
                    React.createElement('span', {
                      className: `px-2 py-1 text-xs rounded font-medium ${
                        alert.level === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                        alert.level === 'WARNING' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-blue-100 text-blue-800'
                      }`
                    }, alert.level)
                  )
                )
              )
            )
          )
        ),

        // Response Actions
        React.createElement('div', { className: 'space-y-6' },
          React.createElement('div', { className: 'bg-white rounded-lg shadow-md p-6' },
            React.createElement('h3', { className: 'text-lg font-semibold text-gray-800 mb-4' },
              'Incident Response Actions'
            ),
            React.createElement('div', { className: 'space-y-3' },
              
              React.createElement('button', {
                onClick: () => handleResponse('monitor'),
                className: `w-full p-3 text-left rounded-lg border-2 transition-colors ${
                  selectedAction === 'monitor' ? 
                  'border-blue-500 bg-blue-50' : 
                  'border-gray-200 hover:border-gray-300'
                }`
              },
                React.createElement('div', { className: 'font-medium' }, 'Continue Monitoring'),
                React.createElement('div', { className: 'text-sm text-gray-600' },
                  'Increase logging and watch for additional indicators'
                )
              ),

              React.createElement('button', {
                onClick: () => handleResponse('isolate'),
                className: `w-full p-3 text-left rounded-lg border-2 transition-colors ${
                  selectedAction === 'isolate' ? 
                  'border-yellow-500 bg-yellow-50' : 
                  'border-gray-200 hover:border-gray-300'
                }`
              },
                React.createElement('div', { className: 'font-medium' }, 'Isolate Affected System'),
                React.createElement('div', { className: 'text-sm text-gray-600' },
                  'Disconnect DESKTOP-VICTIM01 from network'
                )
              ),

              React.createElement('button', {
                onClick: () => handleResponse('block_ip'),
                className: `w-full p-3 text-left rounded-lg border-2 transition-colors ${
                  selectedAction === 'block_ip' ? 
                  'border-orange-500 bg-orange-50' : 
                  'border-gray-200 hover:border-gray-300'
                }`
              },
                React.createElement('div', { className: 'font-medium' }, 'Block Malicious IP'),
                React.createElement('div', { className: 'text-sm text-gray-600' },
                  'Add evil-bank.com to firewall blocklist'
                )
              ),

              React.createElement('button', {
                onClick: () => handleResponse('escalate'),
                className: `w-full p-3 text-left rounded-lg border-2 transition-colors ${
                  selectedAction === 'escalate' ? 
                  'border-red-500 bg-red-50' : 
                  'border-gray-200 hover:border-gray-300'
                }`
              },
                React.createElement('div', { className: 'font-medium' }, 'Escalate to Security Team'),
                React.createElement('div', { className: 'text-sm text-gray-600' },
                  'Alert senior security analysts immediately'
                )
              )
            ),

            selectedAction && React.createElement('div', { className: 'mt-6 p-4 bg-gray-50 rounded-lg' },
              React.createElement('h4', { className: 'font-medium text-gray-800 mb-2' }, 'Action Summary'),
              React.createElement('p', { className: 'text-sm text-gray-600' },
                `You selected: ${selectedAction}`
              ),
              React.createElement('p', { className: 'text-sm text-gray-600' },
                `Response time: ${responseTime} seconds`
              ),
              React.createElement('button', {
                className: 'mt-3 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors',
                onClick: () => alert('Action submitted! Feedback will be provided after scenario completion.')
              }, 'Submit Response')
            )
          ),

          // Scenario Info
          React.createElement('div', { className: 'bg-white rounded-lg shadow-md p-6' },
            React.createElement('h3', { className: 'text-lg font-semibold text-gray-800 mb-4' },
              'Current Scenario'
            ),
            React.createElement('div', { className: 'space-y-2' },
              React.createElement('div', { className: 'flex justify-between' },
                React.createElement('span', { className: 'text-sm text-gray-600' }, 'Type:'),
                React.createElement('span', { className: 'text-sm font-medium' }, 'Phishing Attack')
              ),
              React.createElement('div', { className: 'flex justify-between' },
                React.createElement('span', { className: 'text-sm text-gray-600' }, 'Difficulty:'),
                React.createElement('span', { className: 'text-sm font-medium' }, 'Beginner')
              ),
              React.createElement('div', { className: 'flex justify-between' },
                React.createElement('span', { className: 'text-sm text-gray-600' }, 'Status:'),
                React.createElement('span', { className: 'text-sm font-medium' }, 'In Progress')
              )
            )
          )
        )
      )
    )
  );
};

// רינדור הקומפוננטה
ReactDOM.render(React.createElement(Dashboard), document.getElementById('root'));
